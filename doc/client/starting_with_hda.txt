/*
 * Copyright (c) 2011-2018 Technosoftware GmbH. All rights reserved
 * Web: https://technosoftware.com
 *
 * Purpose:
 * OPC DA/AE/HDA Client Ssolution C++ Manual.
 *
 * The source code in this file is covered under a dual-license scenario:
 *   - Owner of a purchased license: SCLA 1.0
 *   - GPL V3: everybody else
 *
 * SCLA license terms accompanied with this source code.
 * See SCLA 1.0: https://technosoftware.com/license/Source_Code_License_Agreement.pdf
 *
 * GNU General Public License as published by the Free Software Foundation;
 * version 3 of the License are accompanied with this source code.
 * See https://technosoftware.com/license/GPLv3License.txt
 *
 * This source code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 */

/*! \page starting_with_hda Getting started with OPC HDA

\addindex starting_with_hda
\tableofcontents

<p>The getting started lessons provide sample code for the most common use cases.</p>
<ul>
  <li>Lesson 1: Create project</li>
  <li>Lesson 2: Connect</li>
  <li>Lesson 3: Read Raw Historical Data</li>
</ul>
<p>The following lists give an overview on the learning targets covered by each lesson.</p>
<h2>Lesson 1: Create project</h2>
<ul>
  <li>Create a project for developing an OPC HDA client using the OPC CLient SDK C++</li>
</ul>
<h2>Lesson 2: Connect</h2>
<ul>
  <li>Connect/Disconnect connection to the server using DaServer.Connect(), DaServer.Disconnect()</li>
</ul>
<h2>Lesson 3: Read Raw Historical Data</h2>
<ul>
  <li>Read historical data from a specific item.</li>
</ul>
\section lession_1_hda Lesson 1: Create project
<table cellspacing="0" width="100%">
  <tr>
    <th valign="top" align="left" width="15%">Step
      </td>
    <th valign="top" align="left" width="75%">Description
      </td>
  </tr>
  <tr>
    <td valign="top" width="15%">Create a project</td>
    <td valign="top" width="96%">It is recommended to use one of the sample projects as a new application project. If you do not use one of the sample applications see the steps below.</td>
  </tr>
  <tr>
    <td valign="top" width="15%">Include</td>
    <td valign="top" width="75%">Add the <strong>include</strong> and <strong>.\\include\\DaAeHdaClient</strong> directories of your OPC DA/AE/HDA Client Ssolution C++ installation as additional include directory to the include path of your compiler settings.<br />
      (Compiler option /I or use project properties config dialog: C/C++ - General - Additional Include Directories)</td>
  </tr>
  <tr>
    <td valign="top" width="15%">Library Path</td>
    <td valign="top" width="75%">Add the library directory (.\\lib\\$(Platform)\\$(Configuration)\) of your OPC DA/AE/HDA Client Ssolution C++ installation as additional library directory to the library search path of your linker settings. The directory to be added depends on the used compiler.<br />
      (Linker option /LIBPATH or use project properties config dialog: Linker - General - Additional Library Directories)</td>
  </tr>
  <tr>
    <td valign="top" width="15%">Library</td>
    <td valign="top" width="75%">Add OPC DA/AE/HDA Client Ssolution C++ library to the linker.<br />
      (Library name as additional linker argument or use project properties config dialog: Linker - Input - Additional Dependencies)<br />
      Add TechnosoftwareDaAeHdaClient.lib.<br /></td>
  </tr>
  <tr>
    <td valign="top" width="15%">Header Files</td>
    <td valign="top" width="75%">Include the header file OpcClientSdk.h into each source file which needs to have access to OPC DA, OPC AE or OPC HDA Servers via the Unified Client SDK C++.</td>
  </tr>
</table>
\section lession_2_hda Lesson 2: Connect
<p>Add the following code to your application source:</p>
\code
    try {
        Technosoftware::Base::Status                status;
        Technosoftware::DaAeHdaClient::HdaServer    myHdaServer;
        string                                  serverName("OPCSample.OpcHdaServer");
        string                                  ipAddress("localhost");
        char*                                   itemId("Static Data/Ramp [15 min]");
        HdaItem                                 hdaItem;
        HRESULT                                 error;

        Technosoftware::Base::DateTime              startDateTime;
        Technosoftware::Base::DateTime              endDateTime;

        status = myHdaServer.Connect(serverName, ipAddress);
        if (status.IsNotGood()) {
            cout << "Cannot connect: " << status.ToString() << endl;
            return 1;
        }
		
		myHdaServer.Disconnect();
	}
    catch (Technosoftware::Base::StatusException e) {
        cout << "Error occured: " << e.GetStatus().ToString() << endl;
    }
    catch (Technosoftware::Base::Exception e) {
        cout << "Error occured: " << e.GetDisplayText() << endl;
    }
    catch (std::bad_alloc) {
        cout << "Error occured: Ran out of memory" << endl;
    }
    catch (...) {
        cout << "Error occured" << endl;
    }
\endcode

<p>The code snippet above declares a variable to DaServer. This class manages a DA client side application session. It is the main class for connecting to any OPC HDA server.</p>
<p>The DaServer.Connect() method allows you to connect to an OPC HDA server on the local machine or a remote system. The code snippet above connects to an OPC HDA server called "OpcDllClassic.Sample" on the system with the name "nameOrIp".
<p>With the DaServer.Disconnect() you can close a connection with the OPC HDA Server</p>
 
\section lession_3_hda Lesson 3: Read Raw Historical Data

<p>Add the following code to your application source:</p>
\code
    try {
        Technosoftware::Base::Status                status;
        Technosoftware::DaAeHdaClient::HdaServer    myHdaServer;
        string                                  serverName("OPCSample.OpcHdaServer");
        string                                  ipAddress("localhost");
        char*                                   itemId("Static Data/Ramp [15 min]");
        HdaItem                                 hdaItem;
        HRESULT                                 error;

        Technosoftware::Base::DateTime              startDateTime;
        Technosoftware::Base::DateTime              endDateTime;

        status = myHdaServer.Connect(serverName, ipAddress);
        if (status.IsNotGood()) {
            cout << "Cannot connect: " << status.ToString() << endl;
            return 1;
        }

        startDateTime.Assign(2016, 1, 1, 0, 0, 0, 0, 0);
        endDateTime.Assign(2016, 1, 1, 1, 0, 0, 0, 0);

        status = myHdaServer.ReadRaw(itemId, startDateTime.GetTimestamp(), endDateTime.GetTimestamp(), 0, false, &hdaItem, &error);

        if (status.IsNotGood()) {
            cout << "Cannot read raw data: " << status.ToString() << endl;
            return 1;
        }
        else
        {
            // if data exists
            if (error == S_OK)
            {
                for (DWORD index = 0L; index < hdaItem.Count; index++)
                {
                    // hdaItem.Qualities[index];
                    // hdaItem.TimeStamps[index];
                    // hdaItem.DataValues[index];
                }
            }
        }

        // Cleanup
        if (hdaItem.Count > 0) {
            delete hdaItem.Qualities;
            delete hdaItem.TimeStamps;
            delete hdaItem.DataValues;
        }	
		
		myHdaServer.Disconnect();
	}
    catch (Technosoftware::Base::StatusException e) {
        cout << "Error occured: " << e.GetStatus().ToString() << endl;
    }
    catch (Technosoftware::Base::Exception e) {
        cout << "Error occured: " << e.GetDisplayText() << endl;
    }
    catch (std::bad_alloc) {
        cout << "Error occured: Ran out of memory" << endl;
    }
    catch (...) {
        cout << "Error occured" << endl;
    }\endcode

\htmlonly
  Go to the <a href="deployment.html">next</a> section or return to the <a href="index.html">index</a>.
\endhtmlonly
  
  */ 